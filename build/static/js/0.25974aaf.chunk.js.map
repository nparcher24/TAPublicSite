{"version":3,"sources":["../../../src/hooks/use-iso-morphic-effect.ts","../../../src/utils/render.ts","../../../src/utils/match.ts","../../../src/hooks/use-id.ts","../../../src/hooks/use-server-handoff-complete.ts","../../../src/internal/open-closed.tsx","../../../src/hooks/use-window-event.ts","../../../src/components/keyboard.ts","../../../src/hooks/use-is-mounted.ts","../../../src/hooks/use-sync-refs.ts","../../../src/utils/focus-management.ts","../../../src/utils/bugs.ts","../../../../../src/components/transitions/utils/transition.ts","../../../src/utils/disposables.ts","../../../src/utils/once.ts","../../../../src/components/transitions/transition.tsx","../../../src/hooks/use-is-initial-render.ts"],"names":["useIsoMorphicEffect","window","useEffect","Features","RenderStrategy","render","props","slot","defaultTag","features","visible","name","_render","featureFlags","isStatic","rest","unmount","strategy","match","hidden","style","display","omit","as","Component","tag","children","refName","passThroughProps","refRelatedProps","resolvedChildren","Object","isValidElement","Array","Error","line","cloneElement","clone","func","existingProps","event","mergeEventFunctions","compact","createElement","forwardRefWithAs","component","forwardRef","displayName","keysToOmit","key","value","lookup","returnValue","args","error","id","generateId","useId","ready","useServerHandoffComplete","useState","setId","state","serverHandoffComplete","setServerHandoffComplete","State","Context","createContext","useOpenClosed","useContext","OpenClosedProvider","useWindowEvent","type","listener","options","listenerRef","useRef","Keys","useIsMounted","mounted","useSyncRefs","refs","cache","useCallback","ref","Focus","FocusResult","FocusableMode","focusableSelector","selector","getFocusableElements","container","document","body","isFocusableElement","element","mode","Strict","next","focusElement","preventScroll","focusIn","focus","elements","position","a","Node","active","direction","Direction","startIndex","Math","focusOptions","offset","total","nextIdx","isDisabledReactIssue7711","parent","legend","isParentDisabled","previous","isFirstLegend","Reason","disposables","api","requestAnimationFrame","raf","cancelAnimationFrame","nextFrame","setTimeout","timer","clearTimeout","add","dispose","addClasses","node","classes","removeClasses","transition","base","from","to","entered","done","d","_done","cb","called","once","getComputedStyle","transitionDuration","transitionDelay","map","v","parseFloat","z","resolvedValue","durationMs","delaysMs","waitForTransition","reason","useSplitClasses","useMemo","className","TransitionContext","TreeStates","NestingContext","hasChildren","bag","useNesting","doneRef","transitionableChildren","unregister","Hidden","idx","register","child","Visible","childId","noop","eventNames","ensureEventHooksExist","events","result","TransitionChildRenderFeatures","TransitionChild","beforeEnter","afterEnter","beforeLeave","afterLeave","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","setState","context","useTransitionContext","show","appear","initial","useParentNesting","isTransitioning","nesting","enterClasses","enterFromClasses","enterToClasses","enteredClasses","leaveClasses","leaveFromClasses","leaveToClasses","eventsRef","useEvents","skip","propsWeControl","passthroughProps","Transition","usesOpenClosedState","includes","nestingBag","useIsInitialRender","transitionBag","sharedProps","React","hasTransitionContext","hasOpenClosedContext"],"mappings":"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","file":"static/js/0.25974aaf.chunk.js","sourcesContent":["import { useLayoutEffect, useEffect } from 'react'\n\nexport const useIsoMorphicEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect\n","import {\n  Fragment,\n  cloneElement,\n  createElement,\n  forwardRef,\n  isValidElement,\n\n  // Types\n  ElementType,\n  ReactElement,\n} from 'react'\nimport { Props, XOR, __, Expand } from '../types'\nimport { match } from './match'\n\nexport enum Features {\n  /** No features at all */\n  None = 0,\n\n  /**\n   * When used, this will allow us to use one of the render strategies.\n   *\n   * **The render strategies are:**\n   *    - **Unmount**   _(Will unmount the component.)_\n   *    - **Hidden**    _(Will hide the component using the [hidden] attribute.)_\n   */\n  RenderStrategy = 1,\n\n  /**\n   * When used, this will allow the user of our component to be in control. This can be used when\n   * you want to transition based on some state.\n   */\n  Static = 2,\n}\n\nexport enum RenderStrategy {\n  Unmount,\n  Hidden,\n}\n\ntype PropsForFeature<TPassedInFeatures extends Features, TForFeature extends Features, TProps> = {\n  [P in TPassedInFeatures]: P extends TForFeature ? TProps : __\n}[TPassedInFeatures]\n\nexport type PropsForFeatures<T extends Features> = XOR<\n  PropsForFeature<T, Features.Static, { static?: boolean }>,\n  PropsForFeature<T, Features.RenderStrategy, { unmount?: boolean }>\n>\n\nexport function render<TFeature extends Features, TTag extends ElementType, TSlot>({\n  props,\n  slot,\n  defaultTag,\n  features,\n  visible = true,\n  name,\n}: {\n  props: Expand<Props<TTag, TSlot, any> & PropsForFeatures<TFeature>>\n  slot?: TSlot\n  defaultTag: ElementType\n  features?: TFeature\n  visible?: boolean\n  name: string\n}) {\n  // Visible always render\n  if (visible) return _render(props, slot, defaultTag, name)\n\n  let featureFlags = features ?? Features.None\n\n  if (featureFlags & Features.Static) {\n    let { static: isStatic = false, ...rest } = props as PropsForFeatures<Features.Static>\n\n    // When the `static` prop is passed as `true`, then the user is in control, thus we don't care about anything else\n    if (isStatic) return _render(rest, slot, defaultTag, name)\n  }\n\n  if (featureFlags & Features.RenderStrategy) {\n    let { unmount = true, ...rest } = props as PropsForFeatures<Features.RenderStrategy>\n    let strategy = unmount ? RenderStrategy.Unmount : RenderStrategy.Hidden\n\n    return match(strategy, {\n      [RenderStrategy.Unmount]() {\n        return null\n      },\n      [RenderStrategy.Hidden]() {\n        return _render(\n          { ...rest, ...{ hidden: true, style: { display: 'none' } } },\n          slot,\n          defaultTag,\n          name\n        )\n      },\n    })\n  }\n\n  // No features enabled, just render\n  return _render(props, slot, defaultTag, name)\n}\n\nfunction _render<TTag extends ElementType, TSlot>(\n  props: Props<TTag, TSlot> & { ref?: unknown },\n  slot: TSlot = {} as TSlot,\n  tag: ElementType,\n  name: string\n) {\n  let { as: Component = tag, children, refName = 'ref', ...passThroughProps } = omit(props, [\n    'unmount',\n    'static',\n  ])\n\n  // This allows us to use `<HeadlessUIComponent as={MyComponent} refName=\"innerRef\" />`\n  let refRelatedProps = props.ref !== undefined ? { [refName]: props.ref } : {}\n\n  let resolvedChildren = (typeof children === 'function' ? children(slot) : children) as\n    | ReactElement\n    | ReactElement[]\n\n  // Allow for className to be a function with the slot as the contents\n  if (passThroughProps.className && typeof passThroughProps.className === 'function') {\n    ;(passThroughProps as any).className = passThroughProps.className(slot)\n  }\n\n  if (Component === Fragment) {\n    if (Object.keys(passThroughProps).length > 0) {\n      if (\n        !isValidElement(resolvedChildren) ||\n        (Array.isArray(resolvedChildren) && resolvedChildren.length > 1)\n      ) {\n        throw new Error(\n          [\n            'Passing props on \"Fragment\"!',\n            '',\n            `The current component <${name} /> is rendering a \"Fragment\".`,\n            `However we need to passthrough the following props:`,\n            Object.keys(passThroughProps)\n              .map(line => `  - ${line}`)\n              .join('\\n'),\n            '',\n            'You can apply a few solutions:',\n            [\n              'Add an `as=\"...\"` prop, to ensure that we render an actual element instead of a \"Fragment\".',\n              'Render a single element as the child so that we can forward the props onto that element.',\n            ]\n              .map(line => `  - ${line}`)\n              .join('\\n'),\n          ].join('\\n')\n        )\n      }\n\n      return cloneElement(\n        resolvedChildren,\n        Object.assign(\n          {},\n          // Filter out undefined values so that they don't override the existing values\n          mergeEventFunctions(compact(omit(passThroughProps, ['ref'])), resolvedChildren.props, [\n            'onClick',\n          ]),\n          refRelatedProps\n        )\n      )\n    }\n  }\n\n  return createElement(\n    Component,\n    Object.assign({}, omit(passThroughProps, ['ref']), Component !== Fragment && refRelatedProps),\n    resolvedChildren\n  )\n}\n\n/**\n * We can use this function for the following useCase:\n *\n * <Menu.Item> <button onClick={console.log} /> </Menu.Item>\n *\n * Our `Menu.Item` will have an internal `onClick`, if you passthrough an `onClick` to the actual\n * `Menu.Item` component we will call it correctly. However, when we have an `onClick` on the actual\n * first child, that one should _also_ be called (but before this implementation, it was just\n * overriding the `onClick`). But it is only when we *render* that we have access to the existing\n * props of this component.\n *\n * It's a bit hacky, and not that clean, but it is something internal and we have tests to rely on\n * so that we can refactor this later (if needed).\n */\nfunction mergeEventFunctions(\n  passThroughProps: Record<string, any>,\n  existingProps: Record<string, any>,\n  functionsToMerge: string[]\n) {\n  let clone = Object.assign({}, passThroughProps)\n  for (let func of functionsToMerge) {\n    if (passThroughProps[func] !== undefined && existingProps[func] !== undefined) {\n      Object.assign(clone, {\n        [func](event: { defaultPrevented: boolean }) {\n          // Props we control\n          if (!event.defaultPrevented) passThroughProps[func](event)\n\n          // Existing props on the component\n          if (!event.defaultPrevented) existingProps[func](event)\n        },\n      })\n    }\n  }\n\n  return clone\n}\n\n/**\n * This is a hack, but basically we want to keep the full 'API' of the component, but we do want to\n * wrap it in a forwardRef so that we _can_ passthrough the ref\n */\nexport function forwardRefWithAs<T extends { name: string; displayName?: string }>(\n  component: T\n): T & { displayName: string } {\n  return Object.assign(forwardRef((component as unknown) as any) as any, {\n    displayName: component.displayName ?? component.name,\n  })\n}\n\nfunction compact<T extends Record<any, any>>(object: T) {\n  let clone = Object.assign({}, object)\n  for (let key in clone) {\n    if (clone[key] === undefined) delete clone[key]\n  }\n  return clone\n}\n\nfunction omit<T extends Record<any, any>>(object: T, keysToOmit: string[] = []) {\n  let clone = Object.assign({}, object)\n  for (let key of keysToOmit) {\n    if (key in clone) delete clone[key]\n  }\n  return clone\n}\n","export function match<TValue extends string | number = string, TReturnValue = unknown>(\n  value: TValue,\n  lookup: Record<TValue, TReturnValue | ((...args: any[]) => TReturnValue)>,\n  ...args: any[]\n): TReturnValue {\n  if (value in lookup) {\n    let returnValue = lookup[value]\n    return typeof returnValue === 'function' ? returnValue(...args) : returnValue\n  }\n\n  let error = new Error(\n    `Tried to handle \"${value}\" but there is no handler defined. Only defined handlers are: ${Object.keys(\n      lookup\n    )\n      .map(key => `\"${key}\"`)\n      .join(', ')}.`\n  )\n  if (Error.captureStackTrace) Error.captureStackTrace(error, match)\n  throw error\n}\n","import { useState } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\nimport { useServerHandoffComplete } from './use-server-handoff-complete'\n\n// We used a \"simple\" approach first which worked for SSR and rehydration on the client. However we\n// didn't take care of the Suspense case. To fix this we used the approach the @reach-ui/auto-id\n// uses.\n//\n// Credits: https://github.com/reach/reach-ui/blob/develop/packages/auto-id/src/index.tsx\n\nlet id = 0\nfunction generateId() {\n  return ++id\n}\n\nexport function useId() {\n  let ready = useServerHandoffComplete()\n  let [id, setId] = useState(ready ? generateId : null)\n\n  useIsoMorphicEffect(() => {\n    if (id === null) setId(generateId())\n  }, [id])\n\n  return id != null ? '' + id : undefined\n}\n","import { useState, useEffect } from 'react'\n\nlet state = { serverHandoffComplete: false }\n\nexport function useServerHandoffComplete() {\n  let [serverHandoffComplete, setServerHandoffComplete] = useState(state.serverHandoffComplete)\n\n  useEffect(() => {\n    if (serverHandoffComplete === true) return\n\n    setServerHandoffComplete(true)\n  }, [serverHandoffComplete])\n\n  useEffect(() => {\n    if (state.serverHandoffComplete === false) state.serverHandoffComplete = true\n  }, [])\n\n  return serverHandoffComplete\n}\n","import React, {\n  createContext,\n  useContext,\n\n  // Types\n  ReactNode,\n  ReactElement,\n} from 'react'\n\nlet Context = createContext<State | null>(null)\nContext.displayName = 'OpenClosedContext'\n\nexport enum State {\n  Open,\n  Closed,\n}\n\nexport function useOpenClosed() {\n  return useContext(Context)\n}\n\ninterface Props {\n  value: State\n  children: ReactNode\n}\n\nexport function OpenClosedProvider({ value, children }: Props): ReactElement {\n  return <Context.Provider value={value}>{children}</Context.Provider>\n}\n","import { useEffect, useRef } from 'react'\n\nexport function useWindowEvent<TType extends keyof WindowEventMap>(\n  type: TType,\n  listener: (this: Window, ev: WindowEventMap[TType]) => any,\n  options?: boolean | AddEventListenerOptions\n) {\n  let listenerRef = useRef(listener)\n  listenerRef.current = listener\n\n  useEffect(() => {\n    function handler(event: WindowEventMap[TType]) {\n      listenerRef.current.call(window, event)\n    }\n\n    window.addEventListener(type, handler, options)\n    return () => window.removeEventListener(type, handler, options)\n  }, [type, options])\n}\n","// TODO: This must already exist somewhere, right? 🤔\n// Ref: https://www.w3.org/TR/uievents-key/#named-key-attribute-values\nexport enum Keys {\n  Space = ' ',\n  Enter = 'Enter',\n  Escape = 'Escape',\n  Backspace = 'Backspace',\n\n  ArrowLeft = 'ArrowLeft',\n  ArrowUp = 'ArrowUp',\n  ArrowRight = 'ArrowRight',\n  ArrowDown = 'ArrowDown',\n\n  Home = 'Home',\n  End = 'End',\n\n  PageUp = 'PageUp',\n  PageDown = 'PageDown',\n\n  Tab = 'Tab',\n}\n","import { useRef, useEffect } from 'react'\n\nexport function useIsMounted() {\n  let mounted = useRef(false)\n\n  useEffect(() => {\n    mounted.current = true\n\n    return () => {\n      mounted.current = false\n    }\n  }, [])\n\n  return mounted\n}\n","import { useRef, useEffect, useCallback } from 'react'\n\nexport function useSyncRefs<TType>(\n  ...refs: (React.MutableRefObject<TType | null> | ((instance: TType) => void) | null)[]\n) {\n  let cache = useRef(refs)\n\n  useEffect(() => {\n    cache.current = refs\n  }, [refs])\n\n  return useCallback(\n    (value: TType) => {\n      for (let ref of cache.current) {\n        if (ref == null) continue\n        if (typeof ref === 'function') ref(value)\n        else ref.current = value\n      }\n    },\n    [cache]\n  )\n}\n","import { match } from './match'\n\n// Credit:\n//  - https://stackoverflow.com/a/30753870\nlet focusableSelector = [\n  '[contentEditable=true]',\n  '[tabindex]',\n  'a[href]',\n  'area[href]',\n  'button:not([disabled])',\n  'iframe',\n  'input:not([disabled])',\n  'select:not([disabled])',\n  'textarea:not([disabled])',\n]\n  .map(\n    process.env.NODE_ENV === 'test'\n      ? // TODO: Remove this once JSDOM fixes the issue where an element that is\n        // \"hidden\" can be the document.activeElement, because this is not possible\n        // in real browsers.\n        selector => `${selector}:not([tabindex='-1']):not([style*='display: none'])`\n      : selector => `${selector}:not([tabindex='-1'])`\n  )\n  .join(',')\n\nexport enum Focus {\n  /** Focus the first non-disabled element */\n  First = 1 << 0,\n\n  /** Focus the previous non-disabled element */\n  Previous = 1 << 1,\n\n  /** Focus the next non-disabled element */\n  Next = 1 << 2,\n\n  /** Focus the last non-disabled element */\n  Last = 1 << 3,\n\n  /** Wrap tab around */\n  WrapAround = 1 << 4,\n\n  /** Prevent scrolling the focusable elements into view */\n  NoScroll = 1 << 5,\n}\n\nexport enum FocusResult {\n  /** Something went wrong while trying to focus. */\n  Error,\n\n  /** When `Focus.WrapAround` is enabled, going from position `N` to `N+1` where `N` is the last index in the array, then we overflow. */\n  Overflow,\n\n  /** Focus was successful. */\n  Success,\n\n  /** When `Focus.WrapAround` is enabled, going from position `N` to `N-1` where `N` is the first index in the array, then we underflow. */\n  Underflow,\n}\n\nenum Direction {\n  Previous = -1,\n  Next = 1,\n}\n\nexport function getFocusableElements(container: HTMLElement | null = document.body) {\n  if (container == null) return []\n  return Array.from(container.querySelectorAll<HTMLElement>(focusableSelector))\n}\n\nexport enum FocusableMode {\n  /** The element itself must be focusable. */\n  Strict,\n\n  /** The element should be inside of a focusable element. */\n  Loose,\n}\n\nexport function isFocusableElement(\n  element: HTMLElement,\n  mode: FocusableMode = FocusableMode.Strict\n) {\n  if (element === document.body) return false\n\n  return match(mode, {\n    [FocusableMode.Strict]() {\n      return element.matches(focusableSelector)\n    },\n    [FocusableMode.Loose]() {\n      let next: HTMLElement | null = element\n\n      while (next !== null) {\n        if (next.matches(focusableSelector)) return true\n        next = next.parentElement\n      }\n\n      return false\n    },\n  })\n}\n\nexport function focusElement(element: HTMLElement | null) {\n  element?.focus({ preventScroll: true })\n}\n\nexport function focusIn(container: HTMLElement | HTMLElement[], focus: Focus) {\n  let elements = Array.isArray(container)\n    ? container.slice().sort((a, b) => {\n        let position = a.compareDocumentPosition(b)\n\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) return -1\n        if (position & Node.DOCUMENT_POSITION_PRECEDING) return 1\n        return 0\n      })\n    : getFocusableElements(container)\n  let active = document.activeElement as HTMLElement\n\n  let direction = (() => {\n    if (focus & (Focus.First | Focus.Next)) return Direction.Next\n    if (focus & (Focus.Previous | Focus.Last)) return Direction.Previous\n\n    throw new Error('Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last')\n  })()\n\n  let startIndex = (() => {\n    if (focus & Focus.First) return 0\n    if (focus & Focus.Previous) return Math.max(0, elements.indexOf(active)) - 1\n    if (focus & Focus.Next) return Math.max(0, elements.indexOf(active)) + 1\n    if (focus & Focus.Last) return elements.length - 1\n\n    throw new Error('Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last')\n  })()\n\n  let focusOptions = focus & Focus.NoScroll ? { preventScroll: true } : {}\n\n  let offset = 0\n  let total = elements.length\n  let next = undefined\n  do {\n    // Guard against infinite loops\n    if (offset >= total || offset + total <= 0) return FocusResult.Error\n\n    let nextIdx = startIndex + offset\n\n    if (focus & Focus.WrapAround) {\n      nextIdx = (nextIdx + total) % total\n    } else {\n      if (nextIdx < 0) return FocusResult.Underflow\n      if (nextIdx >= total) return FocusResult.Overflow\n    }\n\n    next = elements[nextIdx]\n\n    // Try the focus the next element, might not work if it is \"hidden\" to the user.\n    next?.focus(focusOptions)\n\n    // Try the next one in line\n    offset += direction\n  } while (next !== document.activeElement)\n\n  // This is a little weird, but let me try and explain: There are a few scenario's\n  // in chrome for example where a focused `<a>` tag does not get the default focus\n  // styles and sometimes they do. This highly depends on whether you started by\n  // clicking or by using your keyboard. When you programmatically add focus `anchor.focus()`\n  // then the active element (document.activeElement) is this anchor, which is expected.\n  // However in that case the default focus styles are not applied *unless* you\n  // also add this tabindex.\n  if (!next.hasAttribute('tabindex')) next.setAttribute('tabindex', '0')\n\n  return FocusResult.Success\n}\n","// See: https://github.com/facebook/react/issues/7711\n// See: https://github.com/facebook/react/pull/20612\n// See: https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#concept-fe-disabled (2.)\nexport function isDisabledReactIssue7711(element: Element): boolean {\n  let parent = element.parentElement\n  let legend = null\n\n  while (parent && !(parent instanceof HTMLFieldSetElement)) {\n    if (parent instanceof HTMLLegendElement) legend = parent\n    parent = parent.parentElement\n  }\n\n  let isParentDisabled = parent?.getAttribute('disabled') === '' ?? false\n  if (isParentDisabled && isFirstLegend(legend)) return false\n\n  return isParentDisabled\n}\n\nfunction isFirstLegend(element: HTMLLegendElement | null): boolean {\n  if (!element) return false\n\n  let previous = element.previousElementSibling\n\n  while (previous !== null) {\n    if (previous instanceof HTMLLegendElement) return false\n    previous = previous.previousElementSibling\n  }\n\n  return true\n}\n","import { once } from '../../../utils/once'\nimport { disposables } from '../../../utils/disposables'\n\nfunction addClasses(node: HTMLElement, ...classes: string[]) {\n  node && classes.length > 0 && node.classList.add(...classes)\n}\n\nfunction removeClasses(node: HTMLElement, ...classes: string[]) {\n  node && classes.length > 0 && node.classList.remove(...classes)\n}\n\nexport enum Reason {\n  Finished = 'finished',\n  Cancelled = 'cancelled',\n}\n\nfunction waitForTransition(node: HTMLElement, done: (reason: Reason) => void) {\n  let d = disposables()\n\n  if (!node) return d.dispose\n\n  // Safari returns a comma separated list of values, so let's sort them and take the highest value.\n  let { transitionDuration, transitionDelay } = getComputedStyle(node)\n\n  let [durationMs, delaysMs] = [transitionDuration, transitionDelay].map(value => {\n    let [resolvedValue = 0] = value\n      .split(',')\n      // Remove falsy we can't work with\n      .filter(Boolean)\n      // Values are returned as `0.3s` or `75ms`\n      .map(v => (v.includes('ms') ? parseFloat(v) : parseFloat(v) * 1000))\n      .sort((a, z) => z - a)\n\n    return resolvedValue\n  })\n\n  // Waiting for the transition to end. We could use the `transitionend` event, however when no\n  // actual transition/duration is defined then the `transitionend` event is not fired.\n  //\n  // TODO: Downside is, when you slow down transitions via devtools this timeout is still using the\n  // full 100% speed instead of the 25% or 10%.\n  if (durationMs !== 0) {\n    d.setTimeout(() => {\n      done(Reason.Finished)\n    }, durationMs + delaysMs)\n  } else {\n    // No transition is happening, so we should cleanup already. Otherwise we have to wait until we\n    // get disposed.\n    done(Reason.Finished)\n  }\n\n  // If we get disposed before the timeout runs we should cleanup anyway\n  d.add(() => done(Reason.Cancelled))\n\n  return d.dispose\n}\n\nexport function transition(\n  node: HTMLElement,\n  base: string[],\n  from: string[],\n  to: string[],\n  entered: string[],\n  done?: (reason: Reason) => void\n) {\n  let d = disposables()\n  let _done = done !== undefined ? once(done) : () => {}\n\n  removeClasses(node, ...entered)\n  addClasses(node, ...base, ...from)\n\n  d.nextFrame(() => {\n    removeClasses(node, ...from)\n    addClasses(node, ...to)\n\n    d.add(\n      waitForTransition(node, reason => {\n        removeClasses(node, ...to, ...base)\n        addClasses(node, ...entered)\n        return _done(reason)\n      })\n    )\n  })\n\n  // Once we get disposed, we should ensure that we cleanup after ourselves. In case of an unmount,\n  // the node itself will be nullified and will be a no-op. In case of a full transition the classes\n  // are already removed which is also a no-op. However if you go from enter -> leave mid-transition\n  // then we have some leftovers that should be cleaned.\n  d.add(() => removeClasses(node, ...base, ...from, ...to, ...entered))\n\n  // When we get disposed early, than we should also call the done method but switch the reason.\n  d.add(() => _done(Reason.Cancelled))\n\n  return d.dispose\n}\n","export function disposables() {\n  let disposables: Function[] = []\n\n  let api = {\n    requestAnimationFrame(...args: Parameters<typeof requestAnimationFrame>) {\n      let raf = requestAnimationFrame(...args)\n      api.add(() => cancelAnimationFrame(raf))\n    },\n\n    nextFrame(...args: Parameters<typeof requestAnimationFrame>) {\n      api.requestAnimationFrame(() => {\n        api.requestAnimationFrame(...args)\n      })\n    },\n\n    setTimeout(...args: Parameters<typeof setTimeout>) {\n      let timer = setTimeout(...args)\n      api.add(() => clearTimeout(timer))\n    },\n\n    add(cb: () => void) {\n      disposables.push(cb)\n    },\n\n    dispose() {\n      for (let dispose of disposables.splice(0)) {\n        dispose()\n      }\n    },\n  }\n\n  return api\n}\n","export function once<T>(cb: (...args: T[]) => void) {\n  let state = { called: false }\n\n  return (...args: T[]) => {\n    if (state.called) return\n    state.called = true\n    return cb(...args)\n  }\n}\n","import React, {\n  Fragment,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n\n  // Types\n  ElementType,\n  MutableRefObject,\n} from 'react'\nimport { Props } from '../../types'\n\nimport { useId } from '../../hooks/use-id'\nimport { useIsInitialRender } from '../../hooks/use-is-initial-render'\nimport { match } from '../../utils/match'\nimport { useIsMounted } from '../../hooks/use-is-mounted'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\n\nimport { Features, PropsForFeatures, render, RenderStrategy } from '../../utils/render'\nimport { Reason, transition } from './utils/transition'\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed'\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete'\n\ntype ID = ReturnType<typeof useId>\n\nfunction useSplitClasses(classes: string = '') {\n  return useMemo(() => classes.split(' ').filter(className => className.trim().length > 1), [\n    classes,\n  ])\n}\n\ninterface TransitionContextValues {\n  show: boolean\n  appear: boolean\n  initial: boolean\n}\nlet TransitionContext = createContext<TransitionContextValues | null>(null)\nTransitionContext.displayName = 'TransitionContext'\n\nenum TreeStates {\n  Visible = 'visible',\n  Hidden = 'hidden',\n}\n\nexport interface TransitionClasses {\n  enter?: string\n  enterFrom?: string\n  enterTo?: string\n  entered?: string\n  leave?: string\n  leaveFrom?: string\n  leaveTo?: string\n}\n\nexport interface TransitionEvents {\n  beforeEnter?: () => void\n  afterEnter?: () => void\n  beforeLeave?: () => void\n  afterLeave?: () => void\n}\n\ntype TransitionChildProps<TTag> = Props<TTag, TransitionChildRenderPropArg> &\n  PropsForFeatures<typeof TransitionChildRenderFeatures> &\n  TransitionClasses &\n  TransitionEvents & { appear?: boolean }\n\nfunction useTransitionContext() {\n  let context = useContext(TransitionContext)\n\n  if (context === null) {\n    throw new Error(\n      'A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.'\n    )\n  }\n\n  return context\n}\n\nfunction useParentNesting() {\n  let context = useContext(NestingContext)\n\n  if (context === null) {\n    throw new Error(\n      'A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.'\n    )\n  }\n\n  return context\n}\n\ninterface NestingContextValues {\n  children: MutableRefObject<{ id: ID; state: TreeStates }[]>\n  register: (id: ID) => () => void\n  unregister: (id: ID, strategy?: RenderStrategy) => void\n}\n\nlet NestingContext = createContext<NestingContextValues | null>(null)\nNestingContext.displayName = 'NestingContext'\n\nfunction hasChildren(\n  bag: NestingContextValues['children'] | { children: NestingContextValues['children'] }\n): boolean {\n  if ('children' in bag) return hasChildren(bag.children)\n  return bag.current.filter(({ state }) => state === TreeStates.Visible).length > 0\n}\n\nfunction useNesting(done?: () => void) {\n  let doneRef = useRef(done)\n  let transitionableChildren = useRef<NestingContextValues['children']['current']>([])\n  let mounted = useIsMounted()\n\n  useEffect(() => {\n    doneRef.current = done\n  }, [done])\n\n  let unregister = useCallback(\n    (childId: ID, strategy = RenderStrategy.Hidden) => {\n      let idx = transitionableChildren.current.findIndex(({ id }) => id === childId)\n      if (idx === -1) return\n\n      match(strategy, {\n        [RenderStrategy.Unmount]() {\n          transitionableChildren.current.splice(idx, 1)\n        },\n        [RenderStrategy.Hidden]() {\n          transitionableChildren.current[idx].state = TreeStates.Hidden\n        },\n      })\n\n      if (!hasChildren(transitionableChildren) && mounted.current) {\n        doneRef.current?.()\n      }\n    },\n    [doneRef, mounted, transitionableChildren]\n  )\n\n  let register = useCallback(\n    (childId: ID) => {\n      let child = transitionableChildren.current.find(({ id }) => id === childId)\n      if (!child) {\n        transitionableChildren.current.push({ id: childId, state: TreeStates.Visible })\n      } else if (child.state !== TreeStates.Visible) {\n        child.state = TreeStates.Visible\n      }\n\n      return () => unregister(childId, RenderStrategy.Unmount)\n    },\n    [transitionableChildren, unregister]\n  )\n\n  return useMemo(\n    () => ({\n      children: transitionableChildren,\n      register,\n      unregister,\n    }),\n    [register, unregister, transitionableChildren]\n  )\n}\n\nfunction noop() {}\nlet eventNames = ['beforeEnter', 'afterEnter', 'beforeLeave', 'afterLeave'] as const\nfunction ensureEventHooksExist(events: TransitionEvents) {\n  let result = {} as Record<keyof typeof events, () => void>\n  for (let name of eventNames) {\n    result[name] = events[name] ?? noop\n  }\n  return result\n}\n\nfunction useEvents(events: TransitionEvents) {\n  let eventsRef = useRef(ensureEventHooksExist(events))\n\n  useEffect(() => {\n    eventsRef.current = ensureEventHooksExist(events)\n  }, [events])\n\n  return eventsRef\n}\n\n// ---\n\nlet DEFAULT_TRANSITION_CHILD_TAG = 'div' as const\ntype TransitionChildRenderPropArg = MutableRefObject<HTMLDivElement>\nlet TransitionChildRenderFeatures = Features.RenderStrategy\n\nfunction TransitionChild<TTag extends ElementType = typeof DEFAULT_TRANSITION_CHILD_TAG>(\n  props: TransitionChildProps<TTag>\n) {\n  let {\n    // Event \"handlers\"\n    beforeEnter,\n    afterEnter,\n    beforeLeave,\n    afterLeave,\n\n    // Class names\n    enter,\n    enterFrom,\n    enterTo,\n    entered,\n    leave,\n    leaveFrom,\n    leaveTo,\n\n    // @ts-expect-error\n    ...rest\n  } = props as typeof props\n  let container = useRef<HTMLElement | null>(null)\n  let [state, setState] = useState(TreeStates.Visible)\n  let strategy = rest.unmount ? RenderStrategy.Unmount : RenderStrategy.Hidden\n\n  let { show, appear, initial } = useTransitionContext()\n  let { register, unregister } = useParentNesting()\n\n  let id = useId()\n\n  let isTransitioning = useRef(false)\n\n  let nesting = useNesting(() => {\n    // When all children have been unmounted we can only hide ourselves if and only if we are not\n    // transitioning ourselves. Otherwise we would unmount before the transitions are finished.\n    if (!isTransitioning.current) {\n      setState(TreeStates.Hidden)\n      unregister(id)\n      events.current.afterLeave()\n    }\n  })\n\n  useIsoMorphicEffect(() => {\n    if (!id) return\n    return register(id)\n  }, [register, id])\n\n  useIsoMorphicEffect(() => {\n    // If we are in another mode than the Hidden mode then ignore\n    if (strategy !== RenderStrategy.Hidden) return\n    if (!id) return\n\n    // Make sure that we are visible\n    if (show && state !== TreeStates.Visible) {\n      setState(TreeStates.Visible)\n      return\n    }\n\n    match(state, {\n      [TreeStates.Hidden]: () => unregister(id),\n      [TreeStates.Visible]: () => register(id),\n    })\n  }, [state, id, register, unregister, show, strategy])\n\n  let enterClasses = useSplitClasses(enter)\n  let enterFromClasses = useSplitClasses(enterFrom)\n  let enterToClasses = useSplitClasses(enterTo)\n\n  let enteredClasses = useSplitClasses(entered)\n\n  let leaveClasses = useSplitClasses(leave)\n  let leaveFromClasses = useSplitClasses(leaveFrom)\n  let leaveToClasses = useSplitClasses(leaveTo)\n\n  let events = useEvents({ beforeEnter, afterEnter, beforeLeave, afterLeave })\n\n  let ready = useServerHandoffComplete()\n\n  useEffect(() => {\n    if (ready && state === TreeStates.Visible && container.current === null) {\n      throw new Error('Did you forget to passthrough the `ref` to the actual DOM node?')\n    }\n  }, [container, state, ready])\n\n  // Skipping initial transition\n  let skip = initial && !appear\n\n  useIsoMorphicEffect(() => {\n    let node = container.current\n    if (!node) return\n    if (skip) return\n\n    isTransitioning.current = true\n\n    if (show) events.current.beforeEnter()\n    if (!show) events.current.beforeLeave()\n\n    return show\n      ? transition(node, enterClasses, enterFromClasses, enterToClasses, enteredClasses, reason => {\n          isTransitioning.current = false\n          if (reason === Reason.Finished) events.current.afterEnter()\n        })\n      : transition(node, leaveClasses, leaveFromClasses, leaveToClasses, enteredClasses, reason => {\n          isTransitioning.current = false\n\n          if (reason !== Reason.Finished) return\n\n          // When we don't have children anymore we can safely unregister from the parent and hide\n          // ourselves.\n          if (!hasChildren(nesting)) {\n            setState(TreeStates.Hidden)\n            unregister(id)\n            events.current.afterLeave()\n          }\n        })\n  }, [\n    events,\n    id,\n    isTransitioning,\n    unregister,\n    nesting,\n    container,\n    skip,\n    show,\n    enterClasses,\n    enterFromClasses,\n    enterToClasses,\n    leaveClasses,\n    leaveFromClasses,\n    leaveToClasses,\n  ])\n\n  let propsWeControl = { ref: container }\n  let passthroughProps = rest\n\n  return (\n    <NestingContext.Provider value={nesting}>\n      <OpenClosedProvider\n        value={match(state, {\n          [TreeStates.Visible]: State.Open,\n          [TreeStates.Hidden]: State.Closed,\n        })}\n      >\n        {render({\n          props: { ...passthroughProps, ...propsWeControl },\n          defaultTag: DEFAULT_TRANSITION_CHILD_TAG,\n          features: TransitionChildRenderFeatures,\n          visible: state === TreeStates.Visible,\n          name: 'Transition.Child',\n        })}\n      </OpenClosedProvider>\n    </NestingContext.Provider>\n  )\n}\n\nexport function Transition<TTag extends ElementType = typeof DEFAULT_TRANSITION_CHILD_TAG>(\n  props: TransitionChildProps<TTag> & { show?: boolean; appear?: boolean }\n) {\n  // @ts-expect-error\n  let { show, appear = false, unmount, ...passthroughProps } = props as typeof props\n\n  let usesOpenClosedState = useOpenClosed()\n\n  if (show === undefined && usesOpenClosedState !== null) {\n    show = match(usesOpenClosedState, {\n      [State.Open]: true,\n      [State.Closed]: false,\n    })\n  }\n\n  if (![true, false].includes((show as unknown) as boolean)) {\n    throw new Error('A <Transition /> is used but it is missing a `show={true | false}` prop.')\n  }\n\n  let [state, setState] = useState(show ? TreeStates.Visible : TreeStates.Hidden)\n\n  let nestingBag = useNesting(() => {\n    setState(TreeStates.Hidden)\n  })\n\n  let initial = useIsInitialRender()\n  let transitionBag = useMemo<TransitionContextValues>(\n    () => ({ show: show as boolean, appear: appear || !initial, initial }),\n    [show, appear, initial]\n  )\n\n  useEffect(() => {\n    if (show) {\n      setState(TreeStates.Visible)\n    } else if (!hasChildren(nestingBag)) {\n      setState(TreeStates.Hidden)\n    }\n  }, [show, nestingBag])\n\n  let sharedProps = { unmount }\n\n  return (\n    <NestingContext.Provider value={nestingBag}>\n      <TransitionContext.Provider value={transitionBag}>\n        {render({\n          props: {\n            ...sharedProps,\n            as: Fragment,\n            children: <TransitionChild {...sharedProps} {...passthroughProps} />,\n          },\n          defaultTag: Fragment,\n          features: TransitionChildRenderFeatures,\n          visible: state === TreeStates.Visible,\n          name: 'Transition',\n        })}\n      </TransitionContext.Provider>\n    </NestingContext.Provider>\n  )\n}\n\nTransition.Child = function Child<TTag extends ElementType = typeof DEFAULT_TRANSITION_CHILD_TAG>(\n  props: TransitionChildProps<TTag>\n) {\n  let hasTransitionContext = useContext(TransitionContext) !== null\n  let hasOpenClosedContext = useOpenClosed() !== null\n\n  return !hasTransitionContext && hasOpenClosedContext ? (\n    <Transition {...props} />\n  ) : (\n    <TransitionChild {...props} />\n  )\n}\nTransition.Root = Transition\n","import { useRef, useEffect } from 'react'\n\nexport function useIsInitialRender() {\n  let initial = useRef(true)\n\n  useEffect(() => {\n    initial.current = false\n  }, [])\n\n  return initial.current\n}\n"],"sourceRoot":""}