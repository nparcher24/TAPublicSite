{"version":3,"sources":["../../../../src/components/popover/popover.tsx","../../../src/hooks/use-resolve-button-type.ts","control/Navigation.jsx"],"names":["resolveType","props","tag","PopoverStates","ActionTypes","reducers","state","popoverState","match","Closed","action","button","buttonId","panel","panelId","PopoverContext","createContext","usePopoverContext","component","context","useContext","err","Error","Popover","PopoverAPIContext","usePopoverAPIContext","PopoverGroupContext","usePopoverGroupContext","PopoverPanelContext","stateReducer","useId","reducerBag","useReducer","dispatch","useEffect","type","registerBag","useMemo","close","ClosePopover","groupContext","registerPopover","isFocusWithinPopoverGroup","useCallback","document","useWindowEvent","event","target","isFocusableElement","FocusableMode","restoreElement","focusableElement","api","slot","open","value","State","render","defaultTag","name","Button","forwardRefWithAs","internalButtonRef","useRef","closeOthers","panelContext","isWithinPanel","buttonRef","useSyncRefs","withinPanelButtonRef","activeElementRef","previousActiveElementRef","window","handleKeyDown","Keys","TogglePopover","focusableElements","getFocusableElements","previousIdx","focusIn","Focus","handleKeyUp","handleClick","isDisabledReactIssue7711","Open","ref","useState","setType","useIsoMorphicEffect","useResolveButtonType","passthroughProps","propsWeControl","onKeyDown","onClick","id","onKeyUp","OverlayRenderFeatures","Features","Overlay","overlayRef","usesOpenClosedState","useOpenClosed","visible","features","PanelRenderFeatures","Panel","focus","internalPanelRef","panelRef","activeElement","result","FocusResult","elements","buttonIdx","nextElements","element","groupRef","popovers","setPopovers","unregisterPopover","existing","idx","clone","bag","popover","contextBag","links","destination","Navigation","showNavbar","setShowNavbar","lastScrollTop","setLastScrollTop","showMenu","setShowMenu","showShadow","setShowShadow","scrollListener","e","top","scrollY","console","log","addEventListener","removeEventListener","className","when","duration","style","boxShadow","href","src","alt","map","link","i","pathName","show","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo"],"mappings":"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","file":"static/js/9.9602d22a.chunk.js","sourcesContent":["import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n\n  // Types\n  ContextType,\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  Ref,\n  MutableRefObject,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport {\n  getFocusableElements,\n  Focus,\n  focusIn,\n  FocusResult,\n  isFocusableElement,\n  FocusableMode,\n} from '../../utils/focus-management'\nimport { useWindowEvent } from '../../hooks/use-window-event'\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed'\nimport { useResolveButtonType } from '../../hooks/use-resolve-button-type'\n\nenum PopoverStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  popoverState: PopoverStates\n\n  button: HTMLElement | null\n  buttonId: string\n  panel: HTMLElement | null\n  panelId: string\n}\n\nenum ActionTypes {\n  TogglePopover,\n  ClosePopover,\n\n  SetButton,\n  SetButtonId,\n  SetPanel,\n  SetPanelId,\n}\n\ntype Actions =\n  | { type: ActionTypes.TogglePopover }\n  | { type: ActionTypes.ClosePopover }\n  | { type: ActionTypes.SetButton; button: HTMLElement | null }\n  | { type: ActionTypes.SetButtonId; buttonId: string }\n  | { type: ActionTypes.SetPanel; panel: HTMLElement | null }\n  | { type: ActionTypes.SetPanelId; panelId: string }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.TogglePopover]: state => ({\n    ...state,\n    popoverState: match(state.popoverState, {\n      [PopoverStates.Open]: PopoverStates.Closed,\n      [PopoverStates.Closed]: PopoverStates.Open,\n    }),\n  }),\n  [ActionTypes.ClosePopover](state) {\n    if (state.popoverState === PopoverStates.Closed) return state\n    return { ...state, popoverState: PopoverStates.Closed }\n  },\n  [ActionTypes.SetButton](state, action) {\n    if (state.button === action.button) return state\n    return { ...state, button: action.button }\n  },\n  [ActionTypes.SetButtonId](state, action) {\n    if (state.buttonId === action.buttonId) return state\n    return { ...state, buttonId: action.buttonId }\n  },\n  [ActionTypes.SetPanel](state, action) {\n    if (state.panel === action.panel) return state\n    return { ...state, panel: action.panel }\n  },\n  [ActionTypes.SetPanelId](state, action) {\n    if (state.panelId === action.panelId) return state\n    return { ...state, panelId: action.panelId }\n  },\n}\n\nlet PopoverContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nPopoverContext.displayName = 'PopoverContext'\n\nfunction usePopoverContext(component: string) {\n  let context = useContext(PopoverContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Popover.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, usePopoverContext)\n    throw err\n  }\n  return context\n}\n\nlet PopoverAPIContext = createContext<{\n  close(focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>): void\n} | null>(null)\nPopoverAPIContext.displayName = 'PopoverAPIContext'\n\nfunction usePopoverAPIContext(component: string) {\n  let context = useContext(PopoverAPIContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Popover.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, usePopoverAPIContext)\n    throw err\n  }\n  return context\n}\n\nlet PopoverGroupContext = createContext<{\n  registerPopover(registerbag: PopoverRegisterBag): void\n  unregisterPopover(registerbag: PopoverRegisterBag): void\n  isFocusWithinPopoverGroup(): boolean\n  closeOthers(buttonId: string): void\n} | null>(null)\nPopoverGroupContext.displayName = 'PopoverGroupContext'\n\nfunction usePopoverGroupContext() {\n  return useContext(PopoverGroupContext)\n}\n\nlet PopoverPanelContext = createContext<string | null>(null)\nPopoverPanelContext.displayName = 'PopoverPanelContext'\n\nfunction usePopoverPanelContext() {\n  return useContext(PopoverPanelContext)\n}\n\ninterface PopoverRegisterBag {\n  buttonId: string\n  panelId: string\n  close(): void\n}\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_POPOVER_TAG = 'div' as const\ninterface PopoverRenderPropArg {\n  open: boolean\n  close(focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>): void\n}\n\nexport function Popover<TTag extends ElementType = typeof DEFAULT_POPOVER_TAG>(\n  props: Props<TTag, PopoverRenderPropArg>\n) {\n  let buttonId = `headlessui-popover-button-${useId()}`\n  let panelId = `headlessui-popover-panel-${useId()}`\n\n  let reducerBag = useReducer(stateReducer, {\n    popoverState: PopoverStates.Closed,\n    button: null,\n    buttonId,\n    panel: null,\n    panelId,\n  } as StateDefinition)\n  let [{ popoverState, button, panel }, dispatch] = reducerBag\n\n  useEffect(() => dispatch({ type: ActionTypes.SetButtonId, buttonId }), [buttonId, dispatch])\n  useEffect(() => dispatch({ type: ActionTypes.SetPanelId, panelId }), [panelId, dispatch])\n\n  let registerBag = useMemo(\n    () => ({ buttonId, panelId, close: () => dispatch({ type: ActionTypes.ClosePopover }) }),\n    [buttonId, panelId, dispatch]\n  )\n\n  let groupContext = usePopoverGroupContext()\n  let registerPopover = groupContext?.registerPopover\n  let isFocusWithinPopoverGroup = useCallback(() => {\n    return (\n      groupContext?.isFocusWithinPopoverGroup() ??\n      (button?.contains(document.activeElement) || panel?.contains(document.activeElement))\n    )\n  }, [groupContext, button, panel])\n\n  useEffect(() => registerPopover?.(registerBag), [registerPopover, registerBag])\n\n  // Handle focus out\n  useWindowEvent(\n    'focus',\n    () => {\n      if (popoverState !== PopoverStates.Open) return\n      if (isFocusWithinPopoverGroup()) return\n      if (!button) return\n      if (!panel) return\n\n      dispatch({ type: ActionTypes.ClosePopover })\n    },\n    true\n  )\n\n  // Handle outside click\n  useWindowEvent('mousedown', event => {\n    let target = event.target as HTMLElement\n\n    if (popoverState !== PopoverStates.Open) return\n\n    if (button?.contains(target)) return\n    if (panel?.contains(target)) return\n\n    dispatch({ type: ActionTypes.ClosePopover })\n\n    if (!isFocusableElement(target, FocusableMode.Loose)) {\n      event.preventDefault()\n      button?.focus()\n    }\n  })\n\n  let close = useCallback(\n    (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>) => {\n      dispatch({ type: ActionTypes.ClosePopover })\n\n      let restoreElement = (() => {\n        if (!focusableElement) return button\n        if (focusableElement instanceof HTMLElement) return focusableElement\n        if (focusableElement.current instanceof HTMLElement) return focusableElement.current\n\n        return button\n      })()\n\n      restoreElement?.focus()\n    },\n    [dispatch, button]\n  )\n\n  let api = useMemo<ContextType<typeof PopoverAPIContext>>(() => ({ close }), [close])\n\n  let slot = useMemo<PopoverRenderPropArg>(\n    () => ({ open: popoverState === PopoverStates.Open, close }),\n    [popoverState, close]\n  )\n\n  return (\n    <PopoverContext.Provider value={reducerBag}>\n      <PopoverAPIContext.Provider value={api}>\n        <OpenClosedProvider\n          value={match(popoverState, {\n            [PopoverStates.Open]: State.Open,\n            [PopoverStates.Closed]: State.Closed,\n          })}\n        >\n          {render({\n            props,\n            slot,\n            defaultTag: DEFAULT_POPOVER_TAG,\n            name: 'Popover',\n          })}\n        </OpenClosedProvider>\n      </PopoverAPIContext.Provider>\n    </PopoverContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-expanded'\n  | 'aria-controls'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = usePopoverContext([Popover.name, Button.name].join('.'))\n  let internalButtonRef = useRef<HTMLButtonElement | null>(null)\n\n  let groupContext = usePopoverGroupContext()\n  let closeOthers = groupContext?.closeOthers\n\n  let panelContext = usePopoverPanelContext()\n  let isWithinPanel = panelContext === null ? false : panelContext === state.panelId\n\n  let buttonRef = useSyncRefs(\n    internalButtonRef,\n    ref,\n    isWithinPanel ? null : button => dispatch({ type: ActionTypes.SetButton, button })\n  )\n  let withinPanelButtonRef = useSyncRefs(internalButtonRef, ref)\n\n  // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n  let activeElementRef = useRef<Element | null>(null)\n  let previousActiveElementRef = useRef<Element | null>(\n    typeof window === 'undefined' ? null : document.activeElement\n  )\n  useWindowEvent(\n    'focus',\n    () => {\n      previousActiveElementRef.current = activeElementRef.current\n      activeElementRef.current = document.activeElement\n    },\n    true\n  )\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      if (isWithinPanel) {\n        if (state.popoverState === PopoverStates.Closed) return\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault() // Prevent triggering a *click* event\n            event.stopPropagation()\n            dispatch({ type: ActionTypes.ClosePopover })\n            state.button?.focus() // Re-focus the original opening Button\n            break\n        }\n      } else {\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault() // Prevent triggering a *click* event\n            event.stopPropagation()\n            if (state.popoverState === PopoverStates.Closed) closeOthers?.(state.buttonId)\n            dispatch({ type: ActionTypes.TogglePopover })\n            break\n\n          case Keys.Escape:\n            if (state.popoverState !== PopoverStates.Open) return closeOthers?.(state.buttonId)\n            if (!internalButtonRef.current) return\n            if (!internalButtonRef.current.contains(document.activeElement)) return\n            event.preventDefault()\n            event.stopPropagation()\n            dispatch({ type: ActionTypes.ClosePopover })\n            break\n\n          case Keys.Tab:\n            if (state.popoverState !== PopoverStates.Open) return\n            if (!state.panel) return\n            if (!state.button) return\n\n            // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n            if (event.shiftKey) {\n              // Check if the last focused element exists, and check that it is not inside button or panel itself\n              if (!previousActiveElementRef.current) return\n              if (state.button?.contains(previousActiveElementRef.current)) return\n              if (state.panel.contains(previousActiveElementRef.current)) return\n\n              // Check if the last focused element is *after* the button in the DOM\n              let focusableElements = getFocusableElements()\n              let previousIdx = focusableElements.indexOf(\n                previousActiveElementRef.current as HTMLElement\n              )\n              let buttonIdx = focusableElements.indexOf(state.button)\n              if (buttonIdx > previousIdx) return\n\n              event.preventDefault()\n              event.stopPropagation()\n\n              focusIn(state.panel, Focus.Last)\n            } else {\n              event.preventDefault()\n              event.stopPropagation()\n\n              focusIn(state.panel, Focus.First)\n            }\n\n            break\n        }\n      }\n    },\n    [\n      dispatch,\n      state.popoverState,\n      state.buttonId,\n      state.button,\n      state.panel,\n      internalButtonRef,\n      closeOthers,\n      isWithinPanel,\n    ]\n  )\n\n  let handleKeyUp = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      if (isWithinPanel) return\n      if (event.key === Keys.Space) {\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n      }\n      if (state.popoverState !== PopoverStates.Open) return\n      if (!state.panel) return\n      if (!state.button) return\n\n      // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n      switch (event.key) {\n        case Keys.Tab:\n          // Check if the last focused element exists, and check that it is not inside button or panel itself\n          if (!previousActiveElementRef.current) return\n          if (state.button?.contains(previousActiveElementRef.current)) return\n          if (state.panel.contains(previousActiveElementRef.current)) return\n\n          // Check if the last focused element is *after* the button in the DOM\n          let focusableElements = getFocusableElements()\n          let previousIdx = focusableElements.indexOf(\n            previousActiveElementRef.current as HTMLElement\n          )\n          let buttonIdx = focusableElements.indexOf(state.button)\n          if (buttonIdx > previousIdx) return\n\n          event.preventDefault()\n          event.stopPropagation()\n          focusIn(state.panel, Focus.Last)\n          break\n      }\n    },\n    [state.popoverState, state.panel, state.button, isWithinPanel]\n  )\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return\n      if (props.disabled) return\n      if (isWithinPanel) {\n        dispatch({ type: ActionTypes.ClosePopover })\n        state.button?.focus() // Re-focus the original opening Button\n      } else {\n        if (state.popoverState === PopoverStates.Closed) closeOthers?.(state.buttonId)\n        state.button?.focus()\n        dispatch({ type: ActionTypes.TogglePopover })\n      }\n    },\n    [\n      dispatch,\n      state.button,\n      state.popoverState,\n      state.buttonId,\n      props.disabled,\n      closeOthers,\n      isWithinPanel,\n    ]\n  )\n\n  let slot = useMemo<ButtonRenderPropArg>(\n    () => ({ open: state.popoverState === PopoverStates.Open }),\n    [state]\n  )\n\n  let type = useResolveButtonType(props, internalButtonRef)\n  let passthroughProps = props\n  let propsWeControl = isWithinPanel\n    ? {\n        ref: withinPanelButtonRef,\n        type,\n        onKeyDown: handleKeyDown,\n        onClick: handleClick,\n      }\n    : {\n        ref: buttonRef,\n        id: state.buttonId,\n        type,\n        'aria-expanded': props.disabled ? undefined : state.popoverState === PopoverStates.Open,\n        'aria-controls': state.panel ? state.panelId : undefined,\n        onKeyDown: handleKeyDown,\n        onKeyUp: handleKeyUp,\n        onClick: handleClick,\n      }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Popover.Button',\n  })\n})\n\n// ---\n\nlet DEFAULT_OVERLAY_TAG = 'div' as const\ninterface OverlayRenderPropArg {\n  open: boolean\n}\ntype OverlayPropsWeControl = 'id' | 'aria-hidden' | 'onClick'\n\nlet OverlayRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Overlay = forwardRefWithAs(function Overlay<\n  TTag extends ElementType = typeof DEFAULT_OVERLAY_TAG\n>(\n  props: Props<TTag, OverlayRenderPropArg, OverlayPropsWeControl> &\n    PropsForFeatures<typeof OverlayRenderFeatures>,\n  ref: Ref<HTMLDivElement>\n) {\n  let [{ popoverState }, dispatch] = usePopoverContext([Popover.name, Overlay.name].join('.'))\n  let overlayRef = useSyncRefs(ref)\n\n  let id = `headlessui-popover-overlay-${useId()}`\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return popoverState === PopoverStates.Open\n  })()\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      dispatch({ type: ActionTypes.ClosePopover })\n    },\n    [dispatch]\n  )\n\n  let slot = useMemo<OverlayRenderPropArg>(() => ({ open: popoverState === PopoverStates.Open }), [\n    popoverState,\n  ])\n  let propsWeControl = {\n    ref: overlayRef,\n    id,\n    'aria-hidden': true,\n    onClick: handleClick,\n  }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_OVERLAY_TAG,\n    features: OverlayRenderFeatures,\n    visible,\n    name: 'Popover.Overlay',\n  })\n})\n\n// ---\n\nlet DEFAULT_PANEL_TAG = 'div' as const\ninterface PanelRenderPropArg {\n  open: boolean\n  close: (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>) => void\n}\ntype PanelPropsWeControl = 'id' | 'onKeyDown'\n\nlet PanelRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Panel = forwardRefWithAs(function Panel<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, PanelRenderPropArg, PanelPropsWeControl> &\n    PropsForFeatures<typeof PanelRenderFeatures> & {\n      focus?: boolean\n    },\n  ref: Ref<HTMLDivElement>\n) {\n  let { focus = false, ...passthroughProps } = props\n\n  let [state, dispatch] = usePopoverContext([Popover.name, Panel.name].join('.'))\n  let { close } = usePopoverAPIContext([Popover.name, Panel.name].join('.'))\n\n  let internalPanelRef = useRef<HTMLDivElement | null>(null)\n  let panelRef = useSyncRefs(internalPanelRef, ref, panel => {\n    dispatch({ type: ActionTypes.SetPanel, panel })\n  })\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return state.popoverState === PopoverStates.Open\n  })()\n\n  let handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.key) {\n        case Keys.Escape:\n          if (state.popoverState !== PopoverStates.Open) return\n          if (!internalPanelRef.current) return\n          if (!internalPanelRef.current.contains(document.activeElement)) return\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.ClosePopover })\n          state.button?.focus()\n          break\n      }\n    },\n    [state, internalPanelRef, dispatch]\n  )\n\n  // Unlink on \"unmount\" myself\n  useEffect(() => () => dispatch({ type: ActionTypes.SetPanel, panel: null }), [dispatch])\n\n  // Unlink on \"unmount\" children\n  useEffect(() => {\n    if (props.static) return\n\n    if (state.popoverState === PopoverStates.Closed && (props.unmount ?? true)) {\n      dispatch({ type: ActionTypes.SetPanel, panel: null })\n    }\n  }, [state.popoverState, props.unmount, props.static, dispatch])\n\n  // Move focus within panel\n  useEffect(() => {\n    if (!focus) return\n    if (state.popoverState !== PopoverStates.Open) return\n    if (!internalPanelRef.current) return\n\n    let activeElement = document.activeElement as HTMLElement\n    if (internalPanelRef.current.contains(activeElement)) return // Already focused within Dialog\n\n    focusIn(internalPanelRef.current, Focus.First)\n  }, [focus, internalPanelRef, state.popoverState])\n\n  // Handle Tab / Shift+Tab focus positioning\n  useWindowEvent('keydown', event => {\n    if (state.popoverState !== PopoverStates.Open) return\n    if (!internalPanelRef.current) return\n    if (event.key !== Keys.Tab) return\n    if (!document.activeElement) return\n    if (!internalPanelRef.current) return\n    if (!internalPanelRef.current.contains(document.activeElement)) return\n\n    // We will take-over the default tab behaviour so that we have a bit\n    // control over what is focused next. It will behave exactly the same,\n    // but it will also \"fix\" some issues based on whether you are using a\n    // Portal or not.\n    event.preventDefault()\n\n    let result = focusIn(internalPanelRef.current, event.shiftKey ? Focus.Previous : Focus.Next)\n\n    if (result === FocusResult.Underflow) {\n      return state.button?.focus()\n    } else if (result === FocusResult.Overflow) {\n      if (!state.button) return\n\n      let elements = getFocusableElements()\n      let buttonIdx = elements.indexOf(state.button)\n\n      let nextElements = elements\n        .splice(buttonIdx + 1) // Elements after button\n        .filter(element => !internalPanelRef.current?.contains(element)) // Ignore items in panel\n\n      // Try to focus the next element, however it could fail if we are in a\n      // Portal that happens to be the very last one in the DOM. In that\n      // case we would Error (because nothing after the button is\n      // focusable). Therefore we will try and focus the very first item in\n      // the document.body.\n      if (focusIn(nextElements, Focus.First) === FocusResult.Error) {\n        focusIn(document.body, Focus.First)\n      }\n    }\n  })\n\n  // Handle focus out when we are in special \"focus\" mode\n  useWindowEvent(\n    'focus',\n    () => {\n      if (!focus) return\n      if (state.popoverState !== PopoverStates.Open) return\n      if (!internalPanelRef.current) return\n\n      if (internalPanelRef.current?.contains(document.activeElement as HTMLElement)) return\n      dispatch({ type: ActionTypes.ClosePopover })\n    },\n    true\n  )\n\n  let slot = useMemo<PanelRenderPropArg>(\n    () => ({ open: state.popoverState === PopoverStates.Open, close }),\n    [state, close]\n  )\n  let propsWeControl = {\n    ref: panelRef,\n    id: state.panelId,\n    onKeyDown: handleKeyDown,\n  }\n\n  return (\n    <PopoverPanelContext.Provider value={state.panelId}>\n      {render({\n        props: { ...passthroughProps, ...propsWeControl },\n        slot,\n        defaultTag: DEFAULT_PANEL_TAG,\n        features: PanelRenderFeatures,\n        visible,\n        name: 'Popover.Panel',\n      })}\n    </PopoverPanelContext.Provider>\n  )\n})\n\n// ---\n\nlet DEFAULT_GROUP_TAG = 'div' as const\ninterface GroupRenderPropArg {}\ntype GroupPropsWeControl = 'id'\n\nfunction Group<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, GroupRenderPropArg, GroupPropsWeControl>\n) {\n  let groupRef = useRef<HTMLElement | null>(null)\n  let [popovers, setPopovers] = useState<PopoverRegisterBag[]>([])\n\n  let unregisterPopover = useCallback(\n    (registerbag: PopoverRegisterBag) => {\n      setPopovers(existing => {\n        let idx = existing.indexOf(registerbag)\n        if (idx !== -1) {\n          let clone = existing.slice()\n          clone.splice(idx, 1)\n          return clone\n        }\n        return existing\n      })\n    },\n    [setPopovers]\n  )\n\n  let registerPopover = useCallback(\n    (registerbag: PopoverRegisterBag) => {\n      setPopovers(existing => [...existing, registerbag])\n      return () => unregisterPopover(registerbag)\n    },\n    [setPopovers, unregisterPopover]\n  )\n\n  let isFocusWithinPopoverGroup = useCallback(() => {\n    let element = document.activeElement as HTMLElement\n\n    if (groupRef.current?.contains(element)) return true\n\n    // Check if the focus is in one of the button or panel elements. This is important in case you are rendering inside a Portal.\n    return popovers.some(bag => {\n      return (\n        document.getElementById(bag.buttonId)?.contains(element) ||\n        document.getElementById(bag.panelId)?.contains(element)\n      )\n    })\n  }, [groupRef, popovers])\n\n  let closeOthers = useCallback(\n    (buttonId: string) => {\n      for (let popover of popovers) {\n        if (popover.buttonId !== buttonId) popover.close()\n      }\n    },\n    [popovers]\n  )\n\n  let contextBag = useMemo<ContextType<typeof PopoverGroupContext>>(\n    () => ({\n      registerPopover: registerPopover,\n      unregisterPopover: unregisterPopover,\n      isFocusWithinPopoverGroup,\n      closeOthers,\n    }),\n    [registerPopover, unregisterPopover, isFocusWithinPopoverGroup, closeOthers]\n  )\n\n  let slot = useMemo<GroupRenderPropArg>(() => ({}), [])\n  let propsWeControl = { ref: groupRef }\n  let passthroughProps = props\n\n  return (\n    <PopoverGroupContext.Provider value={contextBag}>\n      {render({\n        props: { ...passthroughProps, ...propsWeControl },\n        slot,\n        defaultTag: DEFAULT_GROUP_TAG,\n        name: 'Popover.Group',\n      })}\n    </PopoverGroupContext.Provider>\n  )\n}\n\n// ---\n\nPopover.Button = Button\nPopover.Overlay = Overlay\nPopover.Panel = Panel\nPopover.Group = Group\n","import { useState, MutableRefObject } from 'react'\n\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\nfunction resolveType<TTag>(props: { type?: string; as?: TTag }) {\n  if (props.type) return props.type\n\n  let tag = props.as ?? 'button'\n  if (typeof tag === 'string' && tag.toLowerCase() === 'button') return 'button'\n\n  return undefined\n}\n\nexport function useResolveButtonType<TTag>(\n  props: { type?: string; as?: TTag },\n  ref: MutableRefObject<HTMLElement | null>\n) {\n  let [type, setType] = useState(() => resolveType(props))\n\n  useIsoMorphicEffect(() => {\n    setType(resolveType(props))\n  }, [props.type, props.as])\n\n  useIsoMorphicEffect(() => {\n    if (type) return\n    if (!ref.current) return\n\n    if (ref.current instanceof HTMLButtonElement && !ref.current.hasAttribute('type')) {\n      setType('button')\n    }\n  }, [type, ref])\n\n  return type\n}\n","import React, { useEffect, useState } from \"react\";\nimport Fade from \"react-reveal/Fade\";\n\n/* This example requires Tailwind CSS v2.0+ */\n// import { Fragment } from \"react\";\nimport { Transition } from \"@headlessui/react\";\nimport FlyoutMenu from \"../components/FlyoutMenu\";\nimport { MenuIcon, XIcon, UserCircleIcon } from \"@heroicons/react/outline\";\n// import DarkLogo from \"../assets/DarkLogo.svg\";\n\nconst links = [\n  { name: \"Home\", destination: \"/\" },\n  { name: \"About Us\", destination: \"/about\" },\n  { name: \"Locations\", destination: \"/locations\" },\n  { name: \"FAQs\", destination: \"/faq\" },\n];\n\nexport default function Navigation(props) {\n  const [showNavbar, setShowNavbar] = useState(true);\n  const [lastScrollTop, setLastScrollTop] = useState(0.0);\n  const [showMenu, setShowMenu] = useState(false);\n  const [showShadow, setShowShadow] = useState(false);\n\n  const scrollListener = (e) => {\n    const top = window.scrollY;\n\n    if (top < 1) {\n      setShowNavbar(true);\n      setShowShadow(false);\n    } else if (top >= lastScrollTop) {\n      setShowNavbar(false);\n      setShowShadow(true);\n    } else {\n      setShowShadow(true);\n      setShowNavbar(true);\n    }\n\n    setLastScrollTop(top);\n    console.log(showNavbar);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", scrollListener);\n    return () => {\n      window.removeEventListener(\"scroll\", scrollListener);\n    };\n  });\n\n  return (\n    <div className=\"z-50 absolute\">\n      <Fade top when={showNavbar} duration={300}>\n        <div\n          className=\"bg-white shadows w-screen top-0 fixed overflow-hidden \"\n          style={showShadow ? { boxShadow: \"0px 0px 20px 2px #c2c2c2\" } : {}}\n        >\n          <>\n            <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n              <div className=\"flex justify-between h-20\">\n                <div className=\"flex justify-between w-full\">\n                  <div className=\"flex-shrink-0 flex items-center transition duration-500 hover:bg-gray-300 hover:bg-opacity-20 rounded-xl\">\n                    <a href=\"/\" className=\"\">\n                      <img\n                        src=\"https://res.cloudinary.com/trainamerican/image/upload/dpr_auto,f_auto,q_auto:best/v1634735144/large%20dark%20logo.webp\"\n                        alt=\"104010 Logo\"\n                        className=\"h-16\"\n                      />\n                    </a>\n                  </div>\n\n                  <div className=\"-ml-2 mr-2 flex items-center md:hidden\">\n                    {/* Mobile menu button */}\n                    <div\n                      aria-label=\"menu\"\n                      className=\"inline-flex items-center justify-center p-2 rounded-md text-gray-400 \"\n                    >\n                      <span className=\"sr-only\">Open main menu</span>\n                      {showMenu ? (\n                        <XIcon\n                          onClick={() => {\n                            showMenu ? setShowMenu(false) : setShowMenu(true);\n                          }}\n                          className=\"block h-6 w-6\"\n                          aria-hidden=\"true\"\n                        />\n                      ) : (\n                        <div className=\"flex flex-row items-center space-x-2\">\n                          <MenuIcon\n                            className=\"block h-10 w-10 rounded-md p-2 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500\"\n                            aria-hidden=\"true\"\n                            onClick={() => {\n                              showMenu ? setShowMenu(false) : setShowMenu(true);\n                            }}\n                          />\n                          <a\n                            area-label=\"contact button\"\n                            href=\"https://www.fitmetrix.io/memberportal/login/fee66bea-163c-ec11-aa68-c756551153f3?LocationID=16470\"\n                            className=\"h-12 py-3 text-md inline-flex items-center font-semibold leading-none   \"\n                          >\n                            <UserCircleIcon\n                              className=\"block h-6 w-6 hover:bg-gray-200 rounded-full transition duration-200 \"\n                              area-hidden=\"true\"\n                            />\n                          </a>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"hidden md:ml-6 md:flex md:space-x-8\">\n                    {/* Current: \"border-indigo-500 text-gray-900\", Default: \"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\" */}\n                    {links.map((link, i) =>\n                      link.name !== \"Home\" ? (\n                        <div\n                          className={`flex items-center justify-items-center border-b-2  ${\n                            props.pathName === link.destination\n                              ? \"border-blue-500\"\n                              : \"\"\n                          }`}\n                          key={`desktop${i}`}\n                        >\n                          <a\n                            href={link.destination}\n                            className={`text-gray-900 p-2 px-4 rounded-md hover:bg-opacity-40 transition duration-500 ease-in-out hover:scale-150 hover:translate-y-1 hover:bg-gray-200 inline-flex items-center  text-sm font-medium `}\n                          >\n                            {link.name}\n                          </a>\n                        </div>\n                      ) : (\n                        <div key={`empty${i}`} />\n                      )\n                    )}\n                    {/* <a\n                      href=\"/about\"\n                      className=\"border-indigo-500 text-gray-900 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium\"\n                    >\n                      About Us\n                    </a> */}\n                    <div className=\"flex items-center justify-items-center\">\n                      <a\n                        area-label=\"contact button\"\n                        href=\"/locations\"\n                        // onClick={() => {\n                        //   props.setShowForm(true);\n                        // }}\n                        className=\"h-12 px-4 py-3 text-md inline-flex items-center font-semibold leading-none bg-taBlue hover:bg-taLightBlue text-white rounded transition duration-500 ease-in-out \"\n                      >\n                        FREE TRIAL\n                      </a>\n                    </div>\n\n                    <div className=\"flex items-center justify-items-center\">\n                      <a\n                        area-label=\"contact button\"\n                        href=\"https://www.fitmetrix.io/webportal/packages/fee66bea-163c-ec11-aa68-c756551153f3\"\n                        // onClick={() => {\n                        //   props.setShowForm(true);\n                        // }}\n                        className=\"h-12 px-4 py-3 text-md inline-flex items-center font-semibold leading-none bg-taRed hover:bg-opacity-80 text-white rounded transition duration-500 ease-in-out \"\n                      >\n                        BOOK NOW\n                      </a>\n                    </div>\n\n                    <div className=\"flex items-center justify-items-center\">\n                      <a\n                        area-label=\"contact button\"\n                        href=\"https://www.fitmetrix.io/memberportal/login/fee66bea-163c-ec11-aa68-c756551153f3?LocationID=16470\"\n                        className=\"h-12 py-3 text-md inline-flex items-center font-semibold leading-none  text-gray-700  \"\n                      >\n                        <UserCircleIcon\n                          className=\"block h-8 w-8 hover:bg-gray-200 rounded-full transition duration-200 \"\n                          area-hidden=\"true\"\n                        />\n                      </a>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <Transition\n              show={showMenu}\n              enter=\"transition duration-500 ease-out\"\n              enterFrom=\"transform scale-95 opacity-0\"\n              enterTo=\"transform scale-100 opacity-100\"\n              leave=\"transition duration-500 ease-out\"\n              leaveFrom=\"transform scale-100 opacity-100\"\n              leaveTo=\"transform scale-95 opacity-0\"\n            >\n              <div className=\"md:hidden\">\n                <div className=\"flex flex-col pt-2 pb-3 space-y-3\">\n                  {/* Current: \"bg-indigo-50 border-indigo-500 text-indigo-700\", Default: \"border-transparent text-gray-500 hover:bg-gray-50 hover:border-gray-300 hover:text-gray-700\" */}\n                  {links.map((link, i) => (\n                    <a\n                      href={link.destination}\n                      key={`mobile${i}`}\n                      className={`bg-gray-50  block pl-3 pr-4 py-2 border-l-4 text-base font-medium sm:pl-5 sm:pr-6 ${\n                        props.pathName === link.destination\n                          ? \"border-blue-500 text-blue-700\"\n                          : \"\"\n                      }`}\n                    >\n                      {\" \"}\n                      {link.name}\n                    </a>\n                  ))}\n\n                  <a\n                    href=\"/locations\"\n                    className=\"bg-taBlue text-center text-white block pl-3 pr-4 py-2  text-2xl font-medium sm:pl-5 sm:pr-6\"\n                  >\n                    FREE TRIAL\n                  </a>\n                  <a\n                    href=\"https://www.fitmetrix.io/webportal/packages/fee66bea-163c-ec11-aa68-c756551153f3\"\n                    className=\"bg-taRed text-center text-white block pl-3 pr-4 py-2  text-2xl font-medium sm:pl-5 sm:pr-6\"\n                  >\n                    BOOK NOW\n                  </a>\n                </div>\n              </div>\n            </Transition>\n          </>\n        </div>\n      </Fade>\n    </div>\n  );\n}\n"],"sourceRoot":""}